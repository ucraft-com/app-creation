name: Automated Build, Push and Deploy

on:
  push:
    branches:
      - master
      - release/*
      - stage
  workflow_dispatch:
    inputs:
      project_id:
        type: choice
        description: 'Project ID to deploy'
        required: true
        default: 'uc-next'
        options:
          - uc-next
          - springbuilder-x
env:
  PROJECT_ID: ${{ github.event.inputs.project_id || 'uc-next' }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  ENVIRONMENT: "live"
  BUILD: ${{ vars.BUILD }}
jobs:
  setup_job:
    runs-on: ubuntu-latest
    outputs:
      service_name: ${{ steps.set_output.outputs.SERVICE_NAME }}
      timeout_minutes: ${{ steps.set_output.outputs.TIMEOUT_MINUTES }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}
    
      - name: 'Get External'
        run: 'make get-external INFRASTRUCTURE_TOKEN=${{ secrets.INFRASTRUCTURE_TOKEN }}'
    
      - name: Set output
        id: set_output
        run: |
          service_name=$(make print_service)
          echo "SERVICE_NAME=$service_name" >> $GITHUB_OUTPUT
          TIMEOUT_MINUTES=$(( ${{ vars.APPROVAL_TIMEOUT_MINUTES_LIVE }} + 0 ))
          echo "Converted number: $TIMEOUT_MINUTES"
          echo "TIMEOUT_MINUTES=$TIMEOUT_MINUTES" >> $GITHUB_OUTPUT


  build_push_deploy_stage:
    runs-on: ubuntu-latest
    needs: setup_job
    if: "${{ github.ref_name == vars.RELEASE_VERSION }}"
    env:
      ENVIRONMENT: "stage"
      SERVICE_NAME: ${{ needs.setup_job.outputs.service_name }}
    steps:
      - name: Stop if AUTOMATED_STAGE is off.
        run: |
          if [ "${{ vars.AUTOMATED_STAGE }}" = "off" ]; then
            echo "AUTOMATED_STAGE is off, stopping workflow"
            exit 78
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ vars.RELEASE_VERSION }}

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
      - name: 'Get External'
        run: 'make get-external INFRASTRUCTURE_TOKEN=${{ secrets.INFRASTRUCTURE_TOKEN }}'
      
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
     
      - name: 'configure Docker & Cluster'
        run: 'make auth ENVIRONMENT=$ENVIRONMENT SERVICE=${{ env.SERVICE_NAME }}'

      - name: 'Test 1'
        run: 'make test1'
        
      - name: 'Make build push'
        run: 'make build_github ENVIRONMENT=$ENVIRONMENT SERVICE=${{ env.SERVICE_NAME }}'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: simenandre/setup-gke-gcloud-auth-plugin@v1

      - name: Download helm value
        run: 'make download INFRASTRUCTURE_TOKEN=${{ secrets.INFRASTRUCTURE_TOKEN }} ENVIRONMENT=$ENVIRONMENT SERVICE=${{ env.SERVICE_NAME }} PROJECT_ID=$PROJECT_ID' 


      - name: Deploy service
        run: 'make deploy HELM=${{ vars.HELM_VERSION }} ENVIRONMENT=$ENVIRONMENT SERVICE=${{ env.SERVICE_NAME }} PROJECT_ID=$PROJECT_ID'

      - name: 'Test 2'
        run: 'make test2'

  build_push_live:
    runs-on: ubuntu-latest
    needs: setup_job
    outputs:
      service_name: ${{ needs.setup_job.outputs.service_name }}
      timeout_minutes: ${{ needs.setup_job.outputs.timeout_minutes }}
    if: github.ref == 'refs/heads/master'
    env:
      SERVICE_NAME: ${{ needs.setup_job.outputs.service_name }}
    steps:
      - name: Stop if AUTOMATED_LIVE is off
        run: |
          if [ "${{ vars.AUTOMATED_LIVE }}" = "off" ]; then
            echo "AUTOMATED_LIVE is off, stopping workflow"
            exit 78
          fi

      - name: Checkout
        uses: actions/checkout@v3
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

      - name: 'Get External'
        run: 'make get-external INFRASTRUCTURE_TOKEN=${{ secrets.INFRASTRUCTURE_TOKEN }}'

      - name: 'configure Docker & Cluster'
        run: 'make auth ENVIRONMENT=$ENVIRONMENT SERVICE=${{ env.SERVICE_NAME }} PROJECT_ID=$PROJECT_ID'

      - name: 'Test 1'
        run: 'make test1'

      - name: 'Make build push'
        run: 'make build_github ENVIRONMENT=$ENVIRONMENT SERVICE=${{ env.SERVICE_NAME }} PROJECT_ID=$PROJECT_ID'

      - name: 'Test 2'
        run: 'make test2'

  approval:
    runs-on: ubuntu-latest
    needs: build_push_live
    outputs:
      service_name: ${{ needs.build_push_live.outputs.service_name }}
    env:
      SERVICE_NAME: ${{ needs.build_push_live.outputs.service_name }}
    steps:
      - name: send approval
        uses: kubmeta/slack-approval@main
        env:
          SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN_LIVE }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN_LIVE }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET_LIVE }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID_LIVE }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
        timeout-minutes: ${{ fromJson(needs.build_push_live.outputs.timeout_minutes) }}
                  
  deploy-to-live:
    runs-on: ubuntu-latest
    needs: approval
    outputs:
      service_name: ${{ needs.approval.outputs.service_name }}
    env:
      SERVICE_NAME: ${{ needs.approval.outputs.service_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
     
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Get External'
        run: 'make get-external INFRASTRUCTURE_TOKEN=${{ secrets.INFRASTRUCTURE_TOKEN }}'
      
      - name: 'configure Docker & Cluster'
        run: 'make auth ENVIRONMENT=$ENVIRONMENT SERVICE=${{ env.SERVICE_NAME }} PROJECT_ID=$PROJECT_ID'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download helm value
        run: 'make download INFRASTRUCTURE_TOKEN=${{ secrets.INFRASTRUCTURE_TOKEN }} ENVIRONMENT=$ENVIRONMENT SERVICE=${{ env.SERVICE_NAME }} PROJECT_ID=$PROJECT_ID' 
      
      - uses: simenandre/setup-gke-gcloud-auth-plugin@v1
      
      - name: Deploy service
        run: 'make deploy HELM=${{ vars.HELM_VERSION }} ENVIRONMENT=$ENVIRONMENT SERVICE=${{ env.SERVICE_NAME }} PROJECT_ID=$PROJECT_ID' 

      # - name: Clear CF cache
      #   run: make clear_cache CLOUDFLARE_TOKEN=${{ secrets.CLOUDFLARE_TOKEN }}

  slack-notification-job-end:
    needs: deploy-to-live
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: ${{ needs.deploy-to-live.outputs.service_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: kubmeta/slack@master
        with: 
          status: ${{ job.status }}
          message:  "`${{ github.ref_name }}` branch deployment to Project ID $PROJECT_ID  and ENVIRONMENT $ENVIRONMENT"
          channel: '#ci-reporting'
        if: always()

